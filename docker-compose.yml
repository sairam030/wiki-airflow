version: '3.8'

x-airflow-common: &airflow-common
  build: .
  image: custom-airflow-spark:2.9.0
  environment: &airflow-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: 'UKMzEm3yIuFYEq1y3-2FxPNWSVwRASpahmQ9kQfEr8E='
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    SPARK_HOME: /opt/spark
    JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
    SPARK_MASTER_URL: spark://spark-master:7077
    # MinIO Configuration
    AWS_ACCESS_KEY_ID: minioadmin
    AWS_SECRET_ACCESS_KEY: minioadmin
    AIRFLOW_CONN_MINIO_S3: s3://minioadmin:minioadmin@?host=http://minio:9000&endpoint_url=http://minio:9000
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
  user: "50000:0"
  depends_on:
    postgres:
      condition: service_healthy
    minio:
      condition: service_healthy
  networks:
    - airflow-net

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
    networks:
      - airflow-net
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - airflow-net
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - airflow-net
    restart: unless-stopped
    # CPU-only mode (works on any system)

  spark-master:
    build: .
    image: custom-airflow-spark:2.9.0
    container_name: spark-master
    hostname: spark-master
    user: root
    command: >
      bash -c "
      /opt/spark/sbin/start-master.sh -h spark-master &&
      tail -f /opt/spark/logs/*
      "
    environment:
      SPARK_MASTER_HOST: spark-master
      SPARK_MASTER_PORT: 7077
      SPARK_MASTER_WEBUI_PORT: 8080
      SPARK_NO_DAEMONIZE: "true"
    ports:
      - "7077:7077"
      - "8081:8080"
    volumes:
      - spark-logs:/opt/spark/logs
    networks:
      - airflow-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  spark-worker-1:
    build: .
    image: custom-airflow-spark:2.9.0
    container_name: spark-worker-1
    hostname: spark-worker-1
    user: root
    command: >
      bash -c "
      /opt/spark/sbin/start-worker.sh spark://spark-master:7077 &&
      tail -f /opt/spark/logs/*
      "
    environment:
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      SPARK_WORKER_WEBUI_PORT: 8081
      SPARK_NO_DAEMONIZE: "true"
    depends_on:
      spark-master:
        condition: service_healthy
    ports:
      - "8082:8081"
    volumes:
      - spark-logs:/opt/spark/logs
    networks:
      - airflow-net
    restart: unless-stopped

  spark-worker-2:
    build: .
    image: custom-airflow-spark:2.9.0
    container_name: spark-worker-2
    hostname: spark-worker-2
    user: root
    command: >
      bash -c "
      /opt/spark/sbin/start-worker.sh spark://spark-master:7077 &&
      tail -f /opt/spark/logs/*
      "
    environment:
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      SPARK_WORKER_WEBUI_PORT: 8081
      SPARK_NO_DAEMONIZE: "true"
    depends_on:
      spark-master:
        condition: service_healthy
    ports:
      - "8083:8081"
    volumes:
      - spark-logs:/opt/spark/logs
    networks:
      - airflow-net
    restart: unless-stopped

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R 50000:0 /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
    user: "0:0"
    volumes:
      - .:/sources

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      spark-master:
        condition: service_started

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      spark-master:
        condition: service_started

volumes:
  postgres-data:
  minio-data:
  spark-logs:
  ollama-data:

networks:
  airflow-net:
    driver: bridge